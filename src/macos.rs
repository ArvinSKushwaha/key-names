use super::*;

pub const ALT_STR: &str = "Option";
pub const LOGO_STR: &str = "Cmd";
pub const MODIFIERS_ORDER: &str = "casm"; // Ctrl + Alt + Shift + Meta

pub const SC_INVALID: u16 = 0xFFFF;
pub const SC_TO_KEY_MAPPING: fn(u16) -> KeyMapping = KeyMapping::Mac;
pub const KEY_MAP_TO_SC: fn(KeyMap) -> u16 = |k| k.mac;

pub fn scancode_name(sc: u16) -> String {
    match super::sc_to_key(sc) {
        Some(key) => key_name(key),
        None => format!("SC{}", sc),
    }
}

fn key_name(key: KeyMappingCode) -> String {
    use KeyMappingCode::*;
    match key {
        Backquote => "`",
        Backslash => "\\",
        BracketLeft => "[",
        BracketRight => "]",
        Comma => ",",
        Digit0 => "0",
        Digit1 => "1",
        Digit2 => "2",
        Digit3 => "3",
        Digit4 => "4",
        Digit5 => "5",
        Digit6 => "6",
        Digit7 => "7",
        Digit8 => "8",
        Digit9 => "9",
        Equal => "=",

        KeyA => "A",
        KeyB => "B",
        KeyC => "C",
        KeyD => "D",
        KeyE => "E",
        KeyF => "F",
        KeyG => "G",
        KeyH => "H",
        KeyI => "I",
        KeyJ => "J",
        KeyK => "K",
        KeyL => "L",
        KeyM => "M",
        KeyN => "N",
        KeyO => "O",
        KeyP => "P",
        KeyQ => "Q",
        KeyR => "R",
        KeyS => "S",
        KeyT => "T",
        KeyU => "U",
        KeyV => "V",
        KeyW => "W",
        KeyX => "X",
        KeyY => "Y",
        KeyZ => "Z",
        Minus => "-",
        Period => ".",
        Quote => "'",
        Semicolon => ";",
        Slash => "/",

        AltLeft => "Option",
        AltRight => "Right Option",
        ControlLeft => "Control",
        ControlRight => "Right Control",
        MetaLeft => "Command",
        MetaRight => "Right Command", // doesn't exist anyway
        ShiftLeft => "Shift",
        ShiftRight => "Right Shift",

        Backspace => "Delete",
        Enter => "Return",

        ArrowDown => "Down",
        ArrowLeft => "Left",
        ArrowRight => "Right",
        ArrowUp => "Up",
        Delete => "Forward Delete",

        Escape => "Esc",

        other => return format!("{:?}", other),
    }
    .to_owned()
}

#[cfg(feature = "winit")]
pub fn key_map_to_winit_vkey(key: KeyMap) -> Option<winit::event::VirtualKeyCode> {
    use winit::event::VirtualKeyCode as Vk;
    use KeyMappingCode as Km;
    Some(match key {
        Km::Digit0 => Vk::Key0,
        Km::Digit1 => Vk::Key1,
        Km::Digit2 => Vk::Key2,
        Km::Digit3 => Vk::Key3,
        Km::Digit4 => Vk::Key4,
        Km::Digit5 => Vk::Key5,
        Km::Digit6 => Vk::Key6,
        Km::Digit7 => Vk::Key7,
        Km::Digit8 => Vk::Key8,
        Km::Digit9 => Vk::Key9,

        Km::KeyA => Vk::A,
        Km::KeyB => Vk::B,
        Km::KeyC => Vk::C,
        Km::KeyD => Vk::D,
        Km::KeyE => Vk::E,
        Km::KeyF => Vk::F,
        Km::KeyG => Vk::G,
        Km::KeyH => Vk::H,
        Km::KeyI => Vk::I,
        Km::KeyJ => Vk::J,
        Km::KeyK => Vk::K,
        Km::KeyL => Vk::L,
        Km::KeyM => Vk::M,
        Km::KeyN => Vk::N,
        Km::KeyO => Vk::O,
        Km::KeyP => Vk::P,
        Km::KeyQ => Vk::Q,
        Km::KeyR => Vk::R,
        Km::KeyS => Vk::S,
        Km::KeyT => Vk::T,
        Km::KeyU => Vk::U,
        Km::KeyV => Vk::V,
        Km::KeyW => Vk::W,
        Km::KeyX => Vk::X,
        Km::KeyY => Vk::Y,
        Km::KeyZ => Vk::Z,

        Km::Escape => Vk::Escape,

        Km::F1 => Vk::F1,
        Km::F2 => Vk::F2,
        Km::F3 => Vk::F3,
        Km::F4 => Vk::F4,
        Km::F5 => Vk::F5,
        Km::F6 => Vk::F6,
        Km::F7 => Vk::F7,
        Km::F8 => Vk::F8,
        Km::F9 => Vk::F9,
        Km::F10 => Vk::F10,
        Km::F11 => Vk::F11,
        Km::F12 => Vk::F12,
        Km::F13 => Vk::F13,
        Km::F14 => Vk::F14,
        Km::F15 => Vk::F15,
        Km::F16 => Vk::F16,
        Km::F17 => Vk::F17,
        Km::F18 => Vk::F18,
        Km::F19 => Vk::F19,
        Km::F20 => Vk::F20,
        Km::F21 => Vk::F21,
        Km::F22 => Vk::F22,
        Km::F23 => Vk::F23,
        Km::F24 => Vk::F24,

        // => Vk::Snapshot, // `PrintScreen` maps to `Sysrq`
        Km::ScrollLock => Vk::Scroll,
        Km::Pause => Vk::Pause,

        Km::Insert => Vk::Insert,
        Km::Home => Vk::Home,
        Km::Delete => Vk::Delete,
        Km::End => Vk::End,
        Km::PageDown => Vk::PageDown,
        Km::PageUp => Vk::PageUp,

        Km::ArrowLeft => Vk::Left,
        Km::ArrowUp => Vk::Up,
        Km::ArrowRight => Vk::Right,
        Km::ArrowDown => Vk::Down,

        Km::Backspace => Vk::Back,
        Km::Enter => Vk::Return,
        Km::Space => Vk::Space,

        // => Vk::Compose,

        // => Vk::Caret,

        //
        Km::NumLock => Vk::Numlock,
        Km::Numpad0 => Vk::Numpad0,
        Km::Numpad1 => Vk::Numpad1,
        Km::Numpad2 => Vk::Numpad2,
        Km::Numpad3 => Vk::Numpad3,
        Km::Numpad4 => Vk::Numpad4,
        Km::Numpad5 => Vk::Numpad5,
        Km::Numpad6 => Vk::Numpad6,
        Km::Numpad7 => Vk::Numpad7,
        Km::Numpad8 => Vk::Numpad8,
        Km::Numpad9 => Vk::Numpad9,
        Km::NumpadAdd => Vk::NumpadAdd,
        Km::NumpadDivide => Vk::NumpadDivide,
        Km::NumpadDecimal => Vk::NumpadDecimal,
        Km::NumpadComma => Vk::NumpadComma,
        Km::NumpadEnter => Vk::NumpadEnter,
        Km::NumpadEqual => Vk::NumpadEquals,
        Km::NumpadMultiply => Vk::NumpadMultiply,
        Km::NumpadSubtract => Vk::NumpadSubtract,

        // => Vk::AbntC1,
        // => Vk::AbntC2,
        Km::Quote => Vk::Apostrophe,
        Km::ContextMenu => Vk::Apps,
        // => Vk::Asterisk,
        // => Vk::At,
        // => Vk::Ax,
        Km::Backslash => Vk::Backslash,
        // => Vk::Calculator,
        Km::CapsLock => Vk::Capital,
        // => Vk::Colon,
        Km::Comma => Vk::Comma,
        Km::Convert => Vk::Convert,
        Km::Equal => Vk::Equals,
        Km::Backquote => Vk::Grave,
        Km::KanaMode => Vk::Kana,
        // => Vk::Kanji,
        Km::AltLeft => Vk::LAlt,
        Km::BracketLeft => Vk::LBracket,
        Km::ControlLeft => Vk::LControl,
        Km::ShiftLeft => Vk::LShift,
        Km::MetaLeft => Vk::LWin,
        Km::LaunchMail => Vk::Mail,
        Km::MediaSelect => Vk::MediaSelect,
        Km::MediaStop => Vk::MediaStop,
        Km::Minus => Vk::Minus,
        Km::AudioVolumeMute => Vk::Mute,
        // => Vk::MyComputer,
        // => Vk::NavigateForward,
        // => Vk::NavigateBackward,
        Km::MediaTrackNext => Vk::NextTrack,
        Km::NonConvert => Vk::NoConvert,
        Km::IntlBackslash => Vk::OEM102,
        Km::Period => Vk::Period,
        Km::MediaPlayPause => Vk::PlayPause,
        // => Vk::Plus,
        Km::Power => Vk::Power,
        Km::MediaTrackPrevious => Vk::PrevTrack,
        Km::AltRight => Vk::RAlt,
        Km::BracketRight => Vk::RBracket,
        Km::ControlRight => Vk::RControl,
        Km::ShiftRight => Vk::RShift,
        Km::MetaRight => Vk::RWin,
        Km::Semicolon => Vk::Semicolon,
        Km::Slash => Vk::Slash,
        Km::Sleep => Vk::Sleep,
        // => Vk::Stop,
        Km::PrintScreen => Vk::Sysrq,
        Km::Tab => Vk::Tab,
        // => Vk::Underline,
        // => Vk::Unlabeled,
        Km::AudioVolumeDown => Vk::VolumeDown,
        Km::AudioVolumeUp => Vk::VolumeUp,
        Km::WakeUp => Vk::Wake,
        Km::BrowserBack => Vk::WebBack,
        Km::BrowserFavorites => Vk::WebFavorites,
        Km::BrowserForward => Vk::WebForward,
        Km::BrowserHome => Vk::WebHome,
        Km::BrowserRefresh => Vk::WebRefresh,
        Km::BrowserSearch => Vk::WebSearch,
        Km::BrowserStop => Vk::WebStop,
        Km::IntlYen => Vk::Yen,
        Km::Copy => Vk::Copy,
        Km::Paste => Vk::Paste,
        Km::Cut => Vk::Cut,

        _ => return None,
    })
}
